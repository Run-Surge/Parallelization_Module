[
    {
        "code line": 0,
        "statement": "def compute_column_means(numeric_data):",
        "has": [
            "numeric_data"
        ],
        "needs": []
    },
    {
        "code line": 1,
        "statement": "num_columns = len(numeric_data[0])",
        "has": [
            "num_columns"
        ],
        "needs": [
            "numeric_data"
        ]
    },
    {
        "code line": 2,
        "statement": "num_rows = len(numeric_data)",
        "has": [
            "num_rows"
        ],
        "needs": [
            "numeric_data"
        ]
    },
    {
        "code line": 3,
        "statement": "means = []",
        "has": [
            "means"
        ],
        "needs": []
    },
    {
        "code line": 4,
        "statement": "for col_idx in range(num_columns):\n    total = 0\n    for row_idx in range(num_rows):\n        total = total + numeric_data[row_idx][col_idx]\n    mean = total / num_rows\n    means.append(mean)",
        "has": [
            "means"
        ],
        "needs": [
            "numeric_data",
            "num_columns",
            "means",
            "num_rows"
        ]
    },
    {
        "code line": 5,
        "statement": "aggregation = 'a:means'",
        "has": [
            "aggregation"
        ],
        "needs": []
    },
    {
        "code line": 6,
        "statement": "return means",
        "has": [],
        "needs": [
            "means"
        ]
    }
]