{
    "numeric_data = preprocess_data(data)#0:preprocess_data(data)": {
        "def preprocess_data(data):": 576,
        "numeric_data = []": 632,
        "for row in data[1:]:\n    numeric_row = []\n    for x in row:\n        numeric_row.append(x)\n    numeric_data.append(numeric_row)": 1257184,
        "aggregation": "c:numeric_data",
        "return numeric_data": 1257184
    },
    "means = compute_column_means(numeric_data)#1:compute_column_means(numeric_data)": {
        "def compute_column_means(numeric_data):": 1256608,
        "num_columns = len(numeric_data[0])": 1256636,
        "num_rows = len(numeric_data)": 1256664,
        "means = []": 1256720,
        "for col_idx in range(num_columns):\n    total = 0\n    for row_idx in range(num_rows):\n        total = total + numeric_data[row_idx]\n    mean = total / num_rows\n    means.append(mean)": 1258920,
        "aggregation": "a:means",
        "return means": 1258920
    },
    "output = compute_correlation_matrix(numeric_data, means)#2:compute_correlation_matrix(numeric_data, means)": {
        "def compute_correlation_matrix(numeric_data, means):": 1258864,
        "num_columns = len(numeric_data[0])": 1258892,
        "num_rows = len(numeric_data)": 1258920,
        "matrix = []": 1258976,
        "for i in range(num_columns):\n    row = []\n    for j in range(num_columns):\n        num = 0\n        denom1 = 0\n        denom2 = 0\n        corr = 0\n        for k in range(num_rows):\n            xi = numeric_data[k] - means[i]\n            xj = numeric_data[k] - means[j]\n            num = num + xi * xj\n            denom1 = denom1 + xi * xi\n            denom2 = denom2 + xj * xj\n        if denom1 == 0 or denom2 == 0:\n            corr = 0\n        else:\n            corr = num / (denom1 ** 0.5 * denom2 ** 0.5)\n        row.append(corr)\n    matrix.append(row)": 2383528,
        "aggregation": "c:matrix",
        "return matrix": 2383528
    }
}